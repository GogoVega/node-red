const { compare, satisfies } = require("semver");

let runtime;

function checkEngines(entryList, callback) {
    let returnObject = false;

    if (!Array.isArray(entryList)) {
        entryList = [entryList];
        returnObject = true;
    }

    for (const entry of entryList) {
        if (entry.engines && typeof entry.engines === "object") {
            const engines = entry.engines;

            entry.enginesSatisfied = {};
            if (engines.node) {
                entry.enginesSatisfied.node = satisfies(process.version, engines.node);
            }

            if (engines["node-red"]) {
                entry.enginesSatisfied["node-red"] = satisfies(runtime.settings.version, engines["node-red"], { includePrerelease: true });
            }
        }
    }

    callback(returnObject ? entryList[0].enginesSatisfied || {} : entryList);
}

module.exports = {
    init: function (_runtime) {
        runtime = _runtime;
    },
    checkEngines: async function (opts) {
        return new Promise(function (resolve, reject) {
            try {
                // TODO: audit engines?
                runtime.log.audit({ event: "engines.checkEngines" }, opts.req);
                checkEngines(opts.engines, (result) => resolve(result));
            } catch (error) {
                error.status = 500;
                reject(error);
            }
        });
    },
    compare: async function (opts) {
        return new Promise(function (resolve, reject) {
            try {
                runtime.log.audit({ event: "engines.compare", v1: opts.v1, v2: opts.v2 }, opts.req);
                // TODO: allow includePrerelease?
                resolve(compare(opts.v1, opts.v2));
            } catch (error) {
                error.status = 500;
                reject(error);
            }
        });
    },
    satisfies: async function (opts) {
        return new Promise(function (resolve, reject) {
            try {
                runtime.log.audit({ event: "engines.satisfies", version: opts.version, range: opts.range }, opts.req);
                // TODO: allow includePrerelease?
                resolve(satisfies(opts.version, opts.range));
            } catch (error) {
                error.status = 500;
                reject(error);
            }
        });
    },
};
